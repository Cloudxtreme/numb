/***************************************************************************
                          string.cpp  -  description
                             -------------------
    begin                : Ven nov 8 2002
    copyright            : (C) 2002 by spe
    email                : spe@artik.intra.selectbourse.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#include <ctype.h>
#include "mystring.h"

extern LogError *systemLog;

String::String(int stringLenght) : Memory<char>(stringLenght) {
}

String::String(char *str) : Memory<char>(strlen(str)) {
	stringCopy(str);

	return;
}

String::~String() {
}

int String::stringCopy(String *sourceString) {
  if ((! sourceString) || (! bloc)) {
    systemLog->sysLog(LOG_ERR, "cannot copy the source string because bloc is NULL or sourceString is NULL\n");
    return EINVAL;
  }
  (void)strncpy(bloc, sourceString->bloc, blocSize);
  
  return 0;
}

int String::stringCopy(char *sourceString) {
  if ((! sourceString) || (! bloc)) {
    systemLog->sysLog(LOG_ERR, "cannot copy the source string because bloc is NULL or sourceString is NULL\n");
    return EINVAL;
  }
  (void)strncpy(bloc, sourceString, blocSize);

  return 0;
}

int String::stringSearch(char *sourceString) {
  if ((! sourceString) || (! bloc)) {
    systemLog->sysLog(LOG_ERR, "cannot search the source string because bloc is NULL or sourceString is NULL\n");
    return -1;
  }
  if (strstr(bloc, sourceString))
    return 1;
  else
    return 0;
}

void String::deleteWhiteSpaces(void) {
  int counter = 0;
  int rotateCounter;

  if (! bloc) {
    systemLog->sysLog(LOG_ERR, "cannot deleting white spaces because the string is NULL\n");
    return;
  }
  while (bloc[counter] && (counter < blocSize)) {
    if ((bloc[counter] == ' ') || (bloc[counter] == '\t')) {
      rotateCounter = counter;
      while ((rotateCounter+1 < blocSize) && (bloc[rotateCounter+1])) {
        bloc[rotateCounter] = bloc[rotateCounter+1];
        rotateCounter++;
      }
      bloc[rotateCounter] = 0;
    }
    counter++;
  }

  return;
}

int String::isNumeric(void) {
  int counter = 0;

  while (bloc[counter]) {
    if (! isdigit(bloc[counter]))
      return 0;
    counter++;
  }
  return 1;
}
